// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Залогиниться в системе
	// (POST /auth/sign-in)
	SignIn(w http.ResponseWriter, r *http.Request)
	// Зарегистрироваться в системе
	// (POST /auth/sign-up)
	SignUp(w http.ResponseWriter, r *http.Request)
	// Получить данные о счетах всех сотрудников
	// (GET /v1/accounts)
	GetAllAccounts(w http.ResponseWriter, r *http.Request)
	// Информация о собственном счёте сотрудника
	// (GET /v1/accounts/my)
	GetMyAccount(w http.ResponseWriter, r *http.Request)
	// Сводная информация о счетах сотрудников
	// (GET /v1/accounts/summary)
	GetAccountsSummary(w http.ResponseWriter, r *http.Request, params GetAccountsSummaryParams)
	// Получить список задач
	// (GET /v1/tasks)
	ListTasks(w http.ResponseWriter, r *http.Request)
	// Создать задачу
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)
	// Распределить задачи по исполнителям
	// (POST /v1/tasks/assign)
	AssignTasks(w http.ResponseWriter, r *http.Request)
	// Получить статистику по стоимости задач
	// (POST /v1/tasks/stats)
	GetTaskStats(w http.ResponseWriter, r *http.Request, params GetTaskStatsParams)
	// Получить информацию о задаче
	// (GET /v1/tasks/{taskID})
	GetTask(w http.ResponseWriter, r *http.Request, taskID string)
	// Закрыть задачу
	// (POST /v1/tasks/{taskID}/close)
	CloseTask(w http.ResponseWriter, r *http.Request, taskID string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// SignIn operation middleware
func (siw *ServerInterfaceWrapper) SignIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignIn(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SignUp operation middleware
func (siw *ServerInterfaceWrapper) SignUp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignUp(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAllAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetAllAccounts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllAccounts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMyAccount operation middleware
func (siw *ServerInterfaceWrapper) GetMyAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMyAccount(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAccountsSummary operation middleware
func (siw *ServerInterfaceWrapper) GetAccountsSummary(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountsSummaryParams

	// ------------- Optional query parameter "from" -------------
	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------
	if paramValue := r.URL.Query().Get("to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccountsSummary(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListTasks operation middleware
func (siw *ServerInterfaceWrapper) ListTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AssignTasks operation middleware
func (siw *ServerInterfaceWrapper) AssignTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AssignTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskStats operation middleware
func (siw *ServerInterfaceWrapper) GetTaskStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTaskStatsParams

	// ------------- Optional query parameter "from" -------------
	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------
	if paramValue := r.URL.Query().Get("to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskStats(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID string

	err = runtime.BindStyledParameter("simple", false, "taskID", chi.URLParam(r, "taskID"), &taskID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTask(w, r, taskID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CloseTask operation middleware
func (siw *ServerInterfaceWrapper) CloseTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID string

	err = runtime.BindStyledParameter("simple", false, "taskID", chi.URLParam(r, "taskID"), &taskID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CloseTask(w, r, taskID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/sign-in", wrapper.SignIn)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/sign-up", wrapper.SignUp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/accounts", wrapper.GetAllAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/accounts/my", wrapper.GetMyAccount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/accounts/summary", wrapper.GetAccountsSummary)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.ListTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks/assign", wrapper.AssignTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks/stats", wrapper.GetTaskStats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{taskID}", wrapper.GetTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks/{taskID}/close", wrapper.CloseTask)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
