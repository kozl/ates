// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить данные о счетах всех сотрудников
	// (GET /v1/accounts)
	GetAllAccounts(w http.ResponseWriter, r *http.Request)
	// Информация о собственном счёте сотрудника
	// (GET /v1/accounts/my)
	GetMyAccount(w http.ResponseWriter, r *http.Request)
	// Сводная информация о счетах сотрудников
	// (GET /v1/accounts/summary)
	GetAccountsSummary(w http.ResponseWriter, r *http.Request, params GetAccountsSummaryParams)
	// Получить список задач
	// (GET /v1/tasks)
	ListTasks(w http.ResponseWriter, r *http.Request)
	// Создать задачу
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)
	// Распределить задачи по исполнителям
	// (POST /v1/tasks/assign)
	AssignTasks(w http.ResponseWriter, r *http.Request)
	// Получить статистику по стоимости задач
	// (POST /v1/tasks/stats)
	GetTaskStats(w http.ResponseWriter, r *http.Request, params GetTaskStatsParams)
	// Получить информацию о задаче
	// (GET /v1/tasks/{taskID})
	GetTask(w http.ResponseWriter, r *http.Request, taskID string)
	// Закрыть задачу
	// (POST /v1/tasks/{taskID}/close)
	CloseTask(w http.ResponseWriter, r *http.Request, taskID string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAllAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetAllAccounts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllAccounts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMyAccount operation middleware
func (siw *ServerInterfaceWrapper) GetMyAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMyAccount(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAccountsSummary operation middleware
func (siw *ServerInterfaceWrapper) GetAccountsSummary(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountsSummaryParams

	// ------------- Optional query parameter "from" -------------
	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------
	if paramValue := r.URL.Query().Get("to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccountsSummary(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListTasks operation middleware
func (siw *ServerInterfaceWrapper) ListTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AssignTasks operation middleware
func (siw *ServerInterfaceWrapper) AssignTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AssignTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskStats operation middleware
func (siw *ServerInterfaceWrapper) GetTaskStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTaskStatsParams

	// ------------- Optional query parameter "from" -------------
	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------
	if paramValue := r.URL.Query().Get("to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskStats(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID string

	err = runtime.BindStyledParameter("simple", false, "taskID", chi.URLParam(r, "taskID"), &taskID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTask(w, r, taskID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CloseTask operation middleware
func (siw *ServerInterfaceWrapper) CloseTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID string

	err = runtime.BindStyledParameter("simple", false, "taskID", chi.URLParam(r, "taskID"), &taskID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CloseTask(w, r, taskID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/accounts", wrapper.GetAllAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/accounts/my", wrapper.GetMyAccount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/accounts/summary", wrapper.GetAccountsSummary)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.ListTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks/assign", wrapper.AssignTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks/stats", wrapper.GetTaskStats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{taskID}", wrapper.GetTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks/{taskID}/close", wrapper.CloseTask)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/C8AAP//94wU1vYsAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
